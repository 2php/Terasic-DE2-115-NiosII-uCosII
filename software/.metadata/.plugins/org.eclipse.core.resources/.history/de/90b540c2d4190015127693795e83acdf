/*************************************************************************
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
* All rights reserved. All use of this software and documentation is     *
* subject to the License Agreement located at the end of this file below.*
**************************************************************************
* Description:                                                           *
* The following is a simple hello world program running MicroC/OS-II.The * 
* purpose of the design is to be a very simple application that just     *
* demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
* for issues such as checking system call return codes. etc.             *
*                                                                        *
* Requirements:                                                          *
*   -Supported Example Hardware Platforms                                *
*     Standard                                                           *
*     Full Featured                                                      *
*     Low Cost                                                           *
*   -Supported Development Boards                                        *
*     Nios II Development Board, Stratix II Edition                      *
*     Nios Development Board, Stratix Professional Edition               *
*     Nios Development Board, Stratix Edition                            *
*     Nios Development Board, Cyclone Edition                            *
*   -System Library Settings                                             *
*     RTOS Type - MicroC/OS-II                                           *
*     Periodic System Timer                                              *
*   -Know Issues                                                         *
*     If this design is run on the ISS, terminal output will take several*
*     minutes per iteration.                                             *
**************************************************************************/
/* Ascensor V1.0: se realizada mediante la utilización de variables globales,
 * en versiones posteriores se implementara mediante el uso de semaforos/mailbox.
*/

#include <stdio.h>
#include "includes.h"
#include "string.h"
#include "sys/alt_irq.h"
#include "key_codes.h"

//Funciones control de LCD
void LCD_cursor( int, int );
void LCD_text( char * );
void LCD_cursor_off( void );

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       4096

OS_STK    control_stk[TASK_STACKSIZE];
OS_STK    cabina_stk[TASK_STACKSIZE];
OS_STK    moduloseguridad_stk[TASK_STACKSIZE];
OS_STK    teclado_stk[TASK_STACKSIZE];
OS_STK	  visualizacion_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */
#define CABINA_PRIORITY       	 3
#define CONTROL_PRIORITY       	 2
#define MODULOSEGURIDAD_PRIORITY 4
#define TECLADO_PRIORITY		 5
#define VISUALIZACION_PRIORITY 	 6

/*Buzones*/
//para visualizacion.
OS_EVENT *mbllamadas_visualizacion; //desde tarea teclado.
OS_EVENT *mbposicion_visualizacion; //desde tarea cabina.
OS_EVENT *mbacciones_visualizacion; //0-> Abajo, 1->Parado, 2->Arriba desde control

//para cabina.
OS_EVENT *mbacciones_cabina; //desde tarea control.

//para control.
OS_EVENT *mbposicion_control; //desde tarea cabina.
OS_EVENT *mbllamadas_control; //desde tarea teclado.

//para modulo seguridad
OS_EVENT *mbacciones_seguridad; //desde tarea cabina.
OS_EVENT *mbposicion_seguridad; //desde tarea cabina.
OS_EVENT *mbsensorplanta_seguridad; //desde tarea cabina.
OS_EVENT *mbsensorpuerta_seguridad; //desde tarea cabina.
OS_EVENT *mbperturbacion_seguridad; //desde tarea teclado.


/*Semaforos*/
OS_EVENT *smSeguridad;

/*Variables teclado*/
volatile int * KEY_ptr = (int *) PUSHBUTTONS_BASE;
volatile int key_pressed;
void pushbutton_ISR();


/*Tarea Control:debe procesar información de los teclados y de la posición
 * del ascensor y decidir donde debe ir */
void control(void* pdata)
{
  INT8U return_code = OS_NO_ERR;
  int accion_control=1;
  int Cola_llamadas=0;
  int Cola_posicion=200;
  int Cola_posicion_convertido;
  int llamadas_restantes[2];
  int direccion=0;//0-> para arriba, 1-> para abajo.
  while (1)
  {

        if(smSeguridad->OSEventCnt==1){//implementar un semaforo seguridad.
            Cola_llamadas=(int *)OSMboxAccept(mbllamadas_control);
            Cola_posicion=(int *)OSMboxAccept(mbposicion_control);
            if(Cola_llamadas>8)Cola_llamadas=0;
            if(Cola_posicion==200){
            	Cola_posicion_convertido=2;
            	direccion=0;
            }
            if(Cola_posicion==600)Cola_posicion_convertido=4;
            if(Cola_posicion==1000){
            	Cola_posicion_convertido=8;
            	direccion=1;
            }
            //ordenar datos
			if(Cola_llamadas!=0&&Cola_llamadas!=Cola_posicion){
				if(llamadas_restantes[0]==0&&llamadas_restantes[1]==0){
					llamadas_restantes[0]=Cola_llamadas;
				}else if(llamadas_restantes[0]!=0&&llamadas_restantes[1]==0){
					int int_var;
					int_var=llamadas_restantes[0];
					//llamadas_restantes[1]=Cola_llamadas;
					if(llamadas_restantes[0]!=Cola_llamadas){
						if(direccion==0){
							if(llamadas_restantes[0]<Cola_llamadas){//
								llamadas_restantes[1]=Cola_llamadas;
							}else{
								llamadas_restantes[0]=Cola_llamadas;
								llamadas_restantes[1]=int_var;
							}

						}else if(direccion==1){
							if(llamadas_restantes[0]<Cola_llamadas){//
								llamadas_restantes[0]=Cola_llamadas;
								llamadas_restantes[1]=int_var;
							}else{
								llamadas_restantes[1]=Cola_llamadas;
							}
						}
					}

				}
			}
			printf("llamadas_restantes: %d, %d\n",llamadas_restantes[0],llamadas_restantes[1]);
			//decidir donde ir.
			if(smSeguridad->OSEventCnt==1){

				if(llamadas_restantes[0]==2){
					if(Cola_posicion<600)accion_control=2;
					if(Cola_posicion==200){
						accion_control=1;
						llamadas_restantes[0]=llamadas_restantes[1];
					}
					if(Cola_posicion>200)accion_control=0;
				}else if(llamadas_restantes[0]==4){
					if(Cola_posicion<600)accion_control=2;
					if(Cola_posicion==600){
						accion_control=1;
						llamadas_restantes[0]=llamadas_restantes[1];
					}
					if(Cola_posicion>600)accion_control=0;
				}else if(llamadas_restantes[0]==8){
					if(Cola_posicion<1000)accion_control=2;
					if(Cola_posicion==1000){
						accion_control=1;
						llamadas_restantes[0]=llamadas_restantes[1];
					}
					if(Cola_posicion>1000)accion_control=0;
				}
				//decrementar semaforos.
			}
			printf("Control: %d\nHello from control\n",Cola_llamadas);

			return_code = OSMboxPost(mbacciones_cabina,(void *)accion_control);//0-> Abajo, 1->Parado, 2->Arriba
			return_code = OSMboxPost(mbacciones_visualizacion,(void *)accion_control);
			return_code = OSMboxPost(mbacciones_seguridad,(void *)accion_control);
		}

	OSTimeDlyHMSM(0, 0, 1, 0);
	}
}
/*Tarea Cabina: deberá recibir las acciones de control y actuar en consecuencia simulando
 * el movimiento del ascensor y activando los sensores pertinentes en cada caso. Debe
 * simular la medida de la posición de la cabina considerando que se emplea un encoder
 * óptico que proporciona 1 pulso por cm.*/
void cabina(void* pdata)
{
  INT8U return_code = OS_NO_ERR;
  int posicion=200,posicion_visualizacion,sensorplanta,sensorpuerta;
    int acciones=1;//parada.
  while (1)
  {

    if(smSeguridad->OSEventCnt==1)acciones=(int *)OSMboxAccept(mbacciones_cabina);//semaforo(control);
    if(acciones==2&&smSeguridad->OSEventCnt==1){
    	sensorpuerta=1;
    	sensorplanta=1;
    	posicion=posicion+50;
    }else if(acciones==1&&smSeguridad->OSEventCnt==1){
    	sensorpuerta=0;
    	sensorplanta=0;
    	OSTimeDlyHMSM(0, 0, 2, 0);
    }
    else if(acciones==0&&smSeguridad->OSEventCnt==1){
    	sensorpuerta=1;
    	sensorplanta=1;
    	posicion=posicion-50;
    }

    if(smSeguridad->OSEventCnt==1)return_code = OSMboxPost(mbposicion_control,(void *)posicion);
	if(posicion>0&&posicion<400&&smSeguridad->OSEventCnt==1){
		posicion_visualizacion=1;
	}else if(posicion>401&&posicion<799&&smSeguridad->OSEventCnt==1){
		posicion_visualizacion=2;
	}else if(posicion>=800&&posicion<1200&&smSeguridad->OSEventCnt==1){
		posicion_visualizacion=3;
	}
	if(smSeguridad->OSEventCnt==1){
		return_code = OSMboxPost(mbacciones_seguridad,(void *)acciones);
		return_code = OSMboxPost(mbposicion_visualizacion,(void *)posicion_visualizacion);
		return_code = OSMboxPost(mbsensorplanta_seguridad,(void *)sensorplanta);
		return_code = OSMboxPost(mbsensorpuerta_seguridad,(void *)sensorpuerta);
		return_code = OSMboxPost(mbposicion_seguridad,(void *)posicion);
	}



	printf("accion: %d posicion ascensor: %d %d\n", acciones, posicion, posicion_visualizacion);
    //printf("Hello from cabina\n");
    OSTimeDlyHMSM(0, 0, 1, 0);
  }
}
/*Tarea Modulo Seguridad:debe monitorizar el sistema de forma periódica, detectar
 * situaciones no deseadas y detener el ascensor si alguna condición de seguridad se
 * incumple. Por ejemplo: no se deberían abrir las puertas con la cabina en movimiento,
 * se debería frenar ante una velocidad excesiva,... Añádanse las restricciones que se
 * considere más adecuadas. Sería interesante introducir, mediante los interruptores,
 * perturbaciones que provoquen alteraciones en el comportamiento del sistema y que
 * deberían ser detectadas por el módulo de seguridad.*/
void moduloseguridad(void* pdata)
{
	int acciones,posiciones,sensorplanta,sensorpuerta,perturbacion;
  while (1)
  {
   acciones=(int *)OSMboxAccept(mbacciones_seguridad);
   posiciones=(int *)OSMboxAccept(mbposicion_seguridad);
   sensorplanta=(int *)OSMboxAccept(mbsensorplanta_seguridad);
   sensorpuerta=(int *)OSMboxAccept(mbsensorpuerta_seguridad);
   perturbacion=(int *)OSMboxAccept(mbperturbacion_seguridad);
   //modificar
   if(perturbacion==1){
	   if(sensorpuerta==0){
		   sensorpuerta=1;
	   }else if(sensorpuerta==1){
		   sensorpuerta=0;
	   }
   }else if(perturbacion==2){
   if(sensorplanta==0){
	   sensorplanta=1;
   }else if(sensorplanta==1){
	   sensorplanta=0;
   }
   }else if(perturbacion==3){
	   if(sensorpuerta==0){
		   sensorpuerta=1;
	   }else if(sensorpuerta==1){
		   sensorpuerta=0;
	   }
	   if(sensorpuerta==0){
		   sensorpuerta=1;
	   }else if(sensorpuerta==1){
		   sensorpuerta=0;
	   }
   }
   printf("puerta: %d, planta: %d, perturbacion: %d",sensorpuerta, sensorplanta,perturbacion);
   if(sensorplanta==1&&sensorpuerta==0){
	   OSSemAccept(smSeguridad);
   }

   printf("Hello from modulo seguridad\n");
   OSTimeDlyHMSM(0, 0, 1, 0);
  }
}
/*Tarea Teclado:emplear los pulsadores de la plataforma DE2-115 como los pulsadores
 *  de cabina del ascensor. Emplear los interruptores para implementar los pulsadores
 *  de llamada en planta (idear un criterio propio de identificación de llamada)*/
void teclado(void* pdata)
{
	INT8U return_code = OS_NO_ERR;
	volatile int * SW_switch_ptr = (int *) SWITCHES_BASE;
	int SW_valor=0,SW_valor_anterior=1;
	while (1)
	  {
		//printf("Hello from teclado\n");
		SW_valor = *(SW_switch_ptr);

		if(SW_valor!=SW_valor_anterior){
			return_code = OSMboxPost(mbllamadas_visualizacion,(void *)SW_valor);
			return_code = OSMboxPost(mbllamadas_control,(void *)SW_valor);
		}
		SW_valor_anterior=SW_valor;
		if(SW_valor&64)return_code = OSMboxPost(mbperturbacion_seguridad,(void *)1);
		if(SW_valor&128)return_code = OSMboxPost(mbperturbacion_seguridad,(void *)2);

		OSTimeDlyHMSM(0, 0, 1, 0);

	 }
}
/*Tarea Visualizacion: debe mostrar información relativa al estado del sistema: posición
 * del ascensor, llamadas pendientes de atender, estado de movimiento, etc... Pueden
 * emplearse tanto los LEDs, como el display LCD o un monitor VGA*/

void visualizacion(void* pdata)
{
	//Variables internas.
	char salida[40],salida1[40],salidablanco[40];
	int Cola_llamadas, Cola_acciones, Cola_posiciones;

	volatile int * green_LED_ptr = (int *) GREEN_LEDS_BASE; // Led's verdes.
    volatile int * red_LED_ptr = (int *) RED_LEDS_BASE;     // Led's rojos.
    sprintf(salidablanco, "                    ");
	while (1)
	{
		Cola_llamadas =(int *)OSMboxAccept(mbllamadas_visualizacion);
		Cola_acciones =(int *)OSMboxAccept(mbacciones_visualizacion);
		Cola_posiciones =(int *)OSMboxAccept(mbposicion_visualizacion);
		if(Cola_llamadas!=0){
			 if(Cola_llamadas&1)printf("parada\n");
			 if(Cola_llamadas&2)printf("Primer piso(2)\n");
			 if(Cola_llamadas&4)printf("Segundo piso(4)\n");
			 if(Cola_llamadas&8)printf("Tercer piso(8)\n");
			 if(Cola_llamadas&64)printf("perturbacion1\n");
			 if(Cola_llamadas&128)printf("perturbacion2\n");
             if((Cola_llamadas&1)||(Cola_llamadas&2)||(Cola_llamadas&4)||(Cola_llamadas&8)||(Cola_llamadas&64)||(Cola_llamadas&128)) *(green_LED_ptr) = Cola_llamadas;

        }
        if(Cola_posiciones!=0&&Cola_posiciones>0&&(Cola_acciones==0||Cola_acciones==1||Cola_acciones==2)&&(smSeguridad->OSEventCnt==1)){//incluir semaforo(cabina) y semaforo(control)
            if(Cola_acciones==1){
                sprintf(salida,"[Planta %d]", Cola_posiciones);
                sprintf(salida1,"Parado");
                
            }else {
                sprintf(salida,"[Planta %d]", Cola_posiciones);
                sprintf(salida1,"En Movimiento");
            }
            //*(red_LED_ptr)=Cola_posiciones;
            if(Cola_posiciones&1)*(red_LED_ptr)=15;
            if(Cola_posiciones&2)*(red_LED_ptr)=240;
            if((Cola_posiciones&1)&&(Cola_posiciones&2))*(red_LED_ptr)=3840;//*/


            LCD_cursor(0,0);
            LCD_text(salida);
            LCD_cursor (0,1);
            LCD_text (salidablanco);
            LCD_cursor (0,1);
            LCD_text (salida1);
            LCD_cursor_off();

        }
        if(smSeguridad->OSEventCnt==0){
        	sprintf(salida,"[Planta %d]", Cola_posiciones);
        	sprintf(salida1,"Fallo Sistema");
        	LCD_cursor(0,0);
			LCD_text(salida);
			LCD_cursor (0,1);
			LCD_text (salidablanco);
			LCD_cursor (0,1);
			LCD_text (salida1);
			LCD_cursor_off();
        }

		printf("Hello from visualizacion\n");
		OSTimeDlyHMSM(0, 0, 1, 0);

	}

}
/****************************************************************************************
 * Subrutina para mover el cursor del LCD
****************************************************************************************/
void LCD_cursor(int x, int y)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// display LCD 16x2
	char instruction;

	instruction = x;
	if (y != 0) instruction |= 0x40;			// activar el bit 6 para la fila inferior
	instruction |= 0x80;						// hay que activar el bit 7 para indicar el lugar
	*(LCD_display_ptr) = instruction;			// escribe registro de instrucciones del LCD
}

/****************************************************************************************
 * Subrutina para enviar una cadena de texto al LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// display LCD 16x2

	while ( *(text_ptr) )
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// escribe los datos en el LCD
		++text_ptr;
	}
}

/****************************************************************************************
 * Subrutina para apagar el cursor del LCD
****************************************************************************************/
void LCD_cursor_off(void)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// display LCD 16x2
	*(LCD_display_ptr) = 0x0C;										// desactiva el curso del LCD
}
/****************************************************************************************
 * pushbutton_ISR
****************************************************************************************/
void pushbutton_ISR( ){
	INT8U return_code = OS_NO_ERR;

	int press;
	press = *(KEY_ptr + 3);					// lee el registro de los pulsadores
	*(KEY_ptr + 3) = 0; 					// borra la interrupción

	if (press & 0x2)press=2;
	if (press & 0x4)press=4;
	if (press & 0x8)press=8;

	return_code = OSMboxPost(mbllamadas_visualizacion,(void *)press);
	return_code = OSMboxPost(mbllamadas_control,(void *)press);

	return;
}
/****************************************************************************************

****************************************************************************************/

int main(void)
{

    *(KEY_ptr + 2) = 0xE;
    *(KEY_ptr + 3) = 0;
    alt_irq_register(PUSHBUTTONS_IRQ, NULL, pushbutton_ISR);

    //Creamos los buzones de mensajes.
    mbllamadas_visualizacion = OSMboxCreate((void *)NULL);
    mbllamadas_control = OSMboxCreate((void *)NULL);
    mbacciones_cabina = OSMboxCreate((void *)NULL);
    mbacciones_visualizacion = OSMboxCreate((void *)NULL);
    mbacciones_seguridad = OSMboxCreate((void *)NULL);
    mbposicion_control = OSMboxCreate((void *)NULL);
    mbposicion_visualizacion = OSMboxCreate((void *)NULL);
    mbposicion_seguridad = OSMboxCreate((void *)NULL);
    mbsensorplanta_seguridad = OSMboxCreate((void *)NULL);
    mbsensorpuerta_seguridad = OSMboxCreate((void *)NULL);

    //Creamos los semaforos.

    smSeguridad = OSSemCreate(1);


	OSTaskCreateExt(control,
						  NULL,
						  (void *)&control_stk[TASK_STACKSIZE-1],
						  CONTROL_PRIORITY,
						  CONTROL_PRIORITY,
						  control_stk,
						  TASK_STACKSIZE,
						  NULL,
						  OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
	OSTaskCreateExt(cabina,
						  NULL,
						  (void *)&cabina_stk[TASK_STACKSIZE-1],
						  CABINA_PRIORITY,
						  CABINA_PRIORITY,
						  cabina_stk,
						  TASK_STACKSIZE,
						  NULL,
						  OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
	OSTaskCreateExt(moduloseguridad,
						  NULL,
						  (void *)&moduloseguridad_stk[TASK_STACKSIZE-1],
						  MODULOSEGURIDAD_PRIORITY,
						  MODULOSEGURIDAD_PRIORITY,
						  moduloseguridad_stk,
						  TASK_STACKSIZE,
						  NULL,
						  OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
	OSTaskCreateExt(teclado,
						  NULL,
						  (void *)&teclado_stk[TASK_STACKSIZE-1],
						  TECLADO_PRIORITY,
						  TECLADO_PRIORITY,
						  teclado_stk,
						  TASK_STACKSIZE,
						  NULL,
						  OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
	OSTaskCreateExt(visualizacion,
						  NULL,
						  (void *)&visualizacion_stk[TASK_STACKSIZE-1],
						  VISUALIZACION_PRIORITY,
						  VISUALIZACION_PRIORITY,
						  visualizacion_stk,
						  TASK_STACKSIZE,
						  NULL,
						  OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);

    OSStart();
    return 0;
}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
